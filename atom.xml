<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RookieYin&#39;s Note</title>
  
  
  <link href="http://rookieyin.github.io/atom.xml" rel="self"/>
  
  <link href="http://rookieyin.github.io/"/>
  <updated>2022-06-14T14:11:50.714Z</updated>
  <id>http://rookieyin.github.io/</id>
  
  <author>
    <name>Yin Peng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>差分算法总结</title>
    <link href="http://rookieyin.github.io/47d678eb0d18/"/>
    <id>http://rookieyin.github.io/47d678eb0d18/</id>
    <published>2022-06-14T14:10:54.000Z</published>
    <updated>2022-06-14T14:11:50.714Z</updated>
    
    
    <summary type="html">&lt;p&gt;说到差分算法，就不得不提一个经典的公交车上下车问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;题目描述：给定二维数组，表示公交车每个站点上下车人数&lt;/li&gt;
&lt;li&gt;问：公交车从起点到终点，车上最多有多少人？或者假如公交车最大载人量为k，问能否将所有人拉到目的地？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;类似的问题还有很多，比如拼车问题、会议室问题、日程安排问题等等。&lt;/p&gt;
&lt;p&gt;本文首先简单介绍下什么是差分算法，然后给个差分算法的解题模板。最后总结一下leetcode中标准差分应用题，方便大家练习。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://rookieyin.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://rookieyin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="差分" scheme="http://rookieyin.github.io/tags/%E5%B7%AE%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ概述</title>
    <link href="http://rookieyin.github.io/3a6862a6af0f/"/>
    <id>http://rookieyin.github.io/3a6862a6af0f/</id>
    <published>2022-06-14T05:45:23.000Z</published>
    <updated>2022-06-14T05:53:59.550Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;消息队列基础&quot;&gt;消息队列基础&lt;/h2&gt;
&lt;h3 id=&quot;什么是消息队列&quot;&gt;什么是消息队列&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;消息&lt;/strong&gt;指的是两个应用间传递的数据。数据的类型有很多种形式，可能只包含文本字符串，也可能包含嵌入对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“消息队列(Message Queue)”是在消息的传输过程中保存消息的容器&lt;/strong&gt;。在消息队列中，通常有生产者和消费者两个角色。生产者只负责发送数据到消息队列，谁从消息队列中取出数据处理，他不管。消费者只负责从消息队列中取出数据处理，他不管这是谁发送的数据。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/images/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAyMC83LzE5LzE3MzY3NTNjNDc1M2M2Zjk.png&quot; style=&quot;width:400px;&quot;&gt;&lt;/img&gt;&lt;/center&gt;</summary>
    
    
    
    <category term="后端" scheme="http://rookieyin.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="消息队列" scheme="http://rookieyin.github.io/categories/%E5%90%8E%E7%AB%AF/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
    <category term="后端" scheme="http://rookieyin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="消息队列" scheme="http://rookieyin.github.io/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    <category term="RabbitMQ" scheme="http://rookieyin.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>快排的3种实现方式</title>
    <link href="http://rookieyin.github.io/b991887dca39/"/>
    <id>http://rookieyin.github.io/b991887dca39/</id>
    <published>2022-06-11T07:48:05.000Z</published>
    <updated>2022-06-11T07:49:24.962Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文循序渐进的总结一下：单路、双路和三路，三种快排实现方式。大家可以去&lt;a href=&quot;https://leetcode.cn/problems/sort-an-array/&quot;&gt;912. 排序数组&lt;/a&gt;验证自己代码的正确性。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://rookieyin.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://rookieyin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="排序" scheme="http://rookieyin.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>MySQL连接查询</title>
    <link href="http://rookieyin.github.io/b20020a2ff1b/"/>
    <id>http://rookieyin.github.io/b20020a2ff1b/</id>
    <published>2022-06-11T06:28:18.000Z</published>
    <updated>2022-06-11T06:31:56.532Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文简单总结一下MySQL中常用的连接查询，以及连接查询的底层原理。&lt;/p&gt;</summary>
    
    
    
    <category term="后端" scheme="http://rookieyin.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="MySQL" scheme="http://rookieyin.github.io/categories/%E5%90%8E%E7%AB%AF/MySQL/"/>
    
    
    <category term="后端" scheme="http://rookieyin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="数据库" scheme="http://rookieyin.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    <category term="MySQL" scheme="http://rookieyin.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Hyperloglog算法</title>
    <link href="http://rookieyin.github.io/956d20e7408c/"/>
    <id>http://rookieyin.github.io/956d20e7408c/</id>
    <published>2022-06-10T11:50:48.000Z</published>
    <updated>2022-06-10T11:54:52.656Z</updated>
    
    
    <summary type="html">&lt;p&gt;在Redis中有一种叫作Hyperloglog的数据结构，用于基数统计，其背后原理就是Hyperloglog算法，本文介绍下HyperLogLog算法的原理和具体实现方式。主要包括LLC算法原理及实现，HLLC算法原理及实现，Redis中HeperLogLog的具体实现。&lt;/p&gt;</summary>
    
    
    
    <category term="算法" scheme="http://rookieyin.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://rookieyin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="统计" scheme="http://rookieyin.github.io/tags/%E7%BB%9F%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Bringing Your Own View: Graph Contrastive Learning without Prefabricated Data Augmentations</title>
    <link href="http://rookieyin.github.io/b1598f2ddb56/"/>
    <id>http://rookieyin.github.io/b1598f2ddb56/</id>
    <published>2022-06-10T11:26:03.000Z</published>
    <updated>2022-06-10T11:46:25.528Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/2201.01702&quot;&gt;https://arxiv.org/pdf/2201.01702&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Shen-Lab/GraphCL_Automated&quot;&gt;https://github.com/Shen-Lab/GraphCL_Automated&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bringing Your Own View: Graph Contrastive Learning without Prefabricated Data Augmentations ，2022，WSDM&lt;/p&gt;</summary>
    
    
    
    <category term="论文笔记" scheme="http://rookieyin.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="图学习" scheme="http://rookieyin.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="对比学习" scheme="http://rookieyin.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%AD%A6%E4%B9%A0/%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="图学习" scheme="http://rookieyin.github.io/tags/%E5%9B%BE%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="对比学习" scheme="http://rookieyin.github.io/tags/%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SimGRACE: A Simple Framework for Graph Contrastive Learning without Data Augmentation</title>
    <link href="http://rookieyin.github.io/36ea8234990f/"/>
    <id>http://rookieyin.github.io/36ea8234990f/</id>
    <published>2022-06-10T11:26:03.000Z</published>
    <updated>2022-06-10T11:47:45.295Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/2202.03104&quot;&gt;https://arxiv.org/pdf/2202.03104&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/junxia97/simgrace&quot;&gt;https://github.com/junxia97/simgrace&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SimGRACE: A Simple Framework for Graph Contrastive Learning without Data Augmentation，2022，WWW&lt;/p&gt;</summary>
    
    
    
    <category term="论文笔记" scheme="http://rookieyin.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="图学习" scheme="http://rookieyin.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="对比学习" scheme="http://rookieyin.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%AD%A6%E4%B9%A0/%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="图学习" scheme="http://rookieyin.github.io/tags/%E5%9B%BE%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="对比学习" scheme="http://rookieyin.github.io/tags/%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>RoSA: A Robust Self-Aligned Framework for Node-Node Graph Contrastive Learning</title>
    <link href="http://rookieyin.github.io/5ac7bfb92e9a/"/>
    <id>http://rookieyin.github.io/5ac7bfb92e9a/</id>
    <published>2022-06-10T11:26:03.000Z</published>
    <updated>2022-06-10T11:45:45.836Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://arxiv.org/pdf/2204.13846&quot;&gt;https://arxiv.org/pdf/2204.13846&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/zhuyun97/rosa&quot;&gt;https://github.com/zhuyun97/rosa&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;RoSA: A Robust Self-Aligned Framework for Node-Node Graph Contrastive Learning，2022，IJCAI&lt;/p&gt;</summary>
    
    
    
    <category term="论文笔记" scheme="http://rookieyin.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="图学习" scheme="http://rookieyin.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="对比学习" scheme="http://rookieyin.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%AD%A6%E4%B9%A0/%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="图学习" scheme="http://rookieyin.github.io/tags/%E5%9B%BE%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="对比学习" scheme="http://rookieyin.github.io/tags/%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Augmentations in Graph Contrastive Learning: Current Methodological Flaws &amp; Towards Better Practices</title>
    <link href="http://rookieyin.github.io/9409fcf95bcf/"/>
    <id>http://rookieyin.github.io/9409fcf95bcf/</id>
    <published>2022-06-10T11:26:03.000Z</published>
    <updated>2022-06-10T11:45:36.354Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://dl.acm.org/doi/pdf/10.1145/3485447.3512200&quot;&gt;https://dl.acm.org/doi/pdf/10.1145/3485447.3512200&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Augmentations in Graph Contrastive Learning: Current Methodological Flaws &amp;amp; Towards Better Practices ，2022，WWW&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-size:18px;font-weight:bold;&quot;&gt;总结：&lt;/span&gt; 第一次看到这种全是实验的文章，个人觉得这篇文章有两个点比较有启发性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;除了accuracy 之外，我们需要关注一些其他指标，比如affinity等，帮助我们更好的评价一个模型。&lt;/li&gt;
&lt;li&gt;context-aware augmentation，之前一直没有关注过这一点，结合领域知识设计一个增强策略。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不过这篇文章，也有一些点是有待商榷的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文章中实验的通用性，这篇文章作者只关注了图分类数据集，然后使用的DAGAs策略也比较有限&lt;/li&gt;
&lt;li&gt;作者虽然提到了context-aware augmentation，但是没有提出更具体的设计方案。使用的两个case也比较特殊。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="论文笔记" scheme="http://rookieyin.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/"/>
    
    <category term="图学习" scheme="http://rookieyin.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="对比学习" scheme="http://rookieyin.github.io/categories/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B0/%E5%9B%BE%E5%AD%A6%E4%B9%A0/%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="图学习" scheme="http://rookieyin.github.io/tags/%E5%9B%BE%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="对比学习" scheme="http://rookieyin.github.io/tags/%E5%AF%B9%E6%AF%94%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>ES概述</title>
    <link href="http://rookieyin.github.io/66cb4eac165c/"/>
    <id>http://rookieyin.github.io/66cb4eac165c/</id>
    <published>2022-05-28T05:43:55.000Z</published>
    <updated>2022-06-12T14:19:05.017Z</updated>
    
    
    <summary type="html">&lt;p&gt;文章转自&lt;a href=&quot;https://whb1990.github.io/posts/67a89a08.html&quot;&gt;这里&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="后端" scheme="http://rookieyin.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="其他" scheme="http://rookieyin.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="后端" scheme="http://rookieyin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="ElasticSearch" scheme="http://rookieyin.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>内存屏障是个啥</title>
    <link href="http://rookieyin.github.io/e11f4fa067fe/"/>
    <id>http://rookieyin.github.io/e11f4fa067fe/</id>
    <published>2022-05-27T05:43:55.000Z</published>
    <updated>2022-06-12T14:20:05.740Z</updated>
    
    
    <summary type="html">&lt;p&gt;文章转自：&lt;a href=&quot;https://www.jianshu.com/p/2ab5e3d7e510&quot;&gt;https://www.jianshu.com/p/2ab5e3d7e510&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;关于内存屏障，还可以参考：&lt;a href=&quot;https://www.cxyzjd.com/article/qfanmingyiq/107449052%E5%92%8Chttps://gorden5566.com/post/1020.html&quot;&gt;https://www.cxyzjd.com/article/qfanmingyiq/107449052和https://gorden5566.com/post/1020.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="后端" scheme="http://rookieyin.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="其他" scheme="http://rookieyin.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="后端" scheme="http://rookieyin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="内存屏障" scheme="http://rookieyin.github.io/tags/%E5%86%85%E5%AD%98%E5%B1%8F%E9%9A%9C/"/>
    
  </entry>
  
  <entry>
    <title>聊聊定时任务的实现方式</title>
    <link href="http://rookieyin.github.io/89003babc13d/"/>
    <id>http://rookieyin.github.io/89003babc13d/</id>
    <published>2022-05-26T05:43:55.000Z</published>
    <updated>2022-06-12T14:04:19.711Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;利用jdk实现&quot;&gt;利用JDK实现&lt;/h2&gt;
&lt;h3 id=&quot;thread-sleep&quot;&gt;Thread Sleep&lt;/h3&gt;
&lt;p&gt;创建一个线程，把任务放到while循环中，每次执行完任务后sleep指定时间。方法简单，但是能够实现的功能十分有限。&lt;/p&gt;</summary>
    
    
    
    <category term="后端" scheme="http://rookieyin.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="其他" scheme="http://rookieyin.github.io/categories/%E5%90%8E%E7%AB%AF/%E5%85%B6%E4%BB%96/"/>
    
    
    <category term="后端" scheme="http://rookieyin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="定时任务" scheme="http://rookieyin.github.io/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Redisson概述</title>
    <link href="http://rookieyin.github.io/524795742ef5/"/>
    <id>http://rookieyin.github.io/524795742ef5/</id>
    <published>2022-05-25T12:38:14.000Z</published>
    <updated>2022-06-12T13:57:37.181Z</updated>
    
    
    <summary type="html">&lt;p&gt;文章转自&lt;a href=&quot;https://my.oschina.net/u/4499317/blog/5039486&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="分布式" scheme="http://rookieyin.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="后端" scheme="http://rookieyin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="分布式" scheme="http://rookieyin.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="Redis" scheme="http://rookieyin.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>分布式锁概述</title>
    <link href="http://rookieyin.github.io/c727a3d2828a/"/>
    <id>http://rookieyin.github.io/c727a3d2828a/</id>
    <published>2022-05-24T12:38:14.000Z</published>
    <updated>2022-06-12T13:58:00.740Z</updated>
    
    
    <summary type="html">&lt;p&gt;文章转自&lt;a href=&quot;https://juejin.cn/post/6844903688088059912&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="分布式" scheme="http://rookieyin.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
    <category term="后端" scheme="http://rookieyin.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
    <category term="分布式" scheme="http://rookieyin.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="锁" scheme="http://rookieyin.github.io/tags/%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>内存管理</title>
    <link href="http://rookieyin.github.io/7adcc9586fb9/"/>
    <id>http://rookieyin.github.io/7adcc9586fb9/</id>
    <published>2022-05-23T14:34:49.000Z</published>
    <updated>2022-06-12T13:50:13.709Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;内存管理概述&quot;&gt;内存管理概述&lt;/h2&gt;
&lt;p&gt;CPU能直接访问的通用存储只有内存和处理器内置的寄存器，进程要想被执行，首先要把执行过程中所需要的数据加载到内存中。&lt;/p&gt;
&lt;p&gt;我们先从简单的入手，一步步深入，看看如何设计一个安全高效的内存管理系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;先考虑单道程序系统，如何实现内存管理？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这个简单，我们可以直接把程序全部加载到内存中，CPU要用到什么数据，直接拿地址去访问内存就好了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这个方案非常简单，在某些场景下是可行的。&lt;strong&gt;但是如果内存空间有限，放不下整个进程怎么办呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;略加思考，我们就能想到动态加载技术！程序运行过程中并不需要访问程序的所有代码和数据，我们只需要把一部分代码和数据加载到内存，然后程序用到什么就加载什么，如果内存不够了，把暂时用不到的数据先踢出内存，腾出一些空间给新加载进来的数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;前面的场景中，考虑的都是单道程序，&lt;strong&gt;如果操作系统中同时运行多个进程呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;唉呀，有多个程序同时运行就不太好办了！此时，我们不仅要把内存划分成多个区域，每个进程分配一个独立的区域，还要保证每个进程不能越界访问其他进程的内存空间。再考虑动态加载过程中可能存在的问题，那就更麻烦了！此时就需要用到虚拟内存技术了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面我们详细介绍下在操作系统的发展历程中，用到的4种内存管理机制。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="http://rookieyin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="http://rookieyin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="http://rookieyin.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="内存" scheme="http://rookieyin.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>进程与线程</title>
    <link href="http://rookieyin.github.io/0451b9009da7/"/>
    <id>http://rookieyin.github.io/0451b9009da7/</id>
    <published>2022-05-22T14:34:49.000Z</published>
    <updated>2022-06-12T13:48:27.189Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文内容基本来自&lt;a href=&quot;https://xiaolincoding.com/os/4_process/multithread_sync.html#%E7%94%9F%E4%BA%A7%E8%80%85-%E6%B6%88%E8%B4%B9%E8%80%85%E9%97%AE%E9%A2%98&quot;&gt;小林coding&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;什么是进程&quot;&gt;什么是进程&lt;/h2&gt;
&lt;p&gt;进程，简单来说就是“一个运行中的程序”。为什么会出现“进程”这个概念呢？&lt;/p&gt;
&lt;p&gt;早期的计算机系统一次只允许执行一个程序，这个程序拥有系统的所有资源。但是现代计算机系统允许将多个程序调入内存并发执行，这就要求对各种程序提供更严格的控制和更好的划分，从而产生了“进程”的概念，即执行中的程序。系统可以看作由一组进程组成：操作系统进程执行系统代码，用户进程执行用户代码。通过CPU多路复用，所有进程可以并发执行。通过进程之间的切换，操作系统能使计算机更为高效。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="http://rookieyin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="操作系统" scheme="http://rookieyin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="操作系统" scheme="http://rookieyin.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    <category term="进程" scheme="http://rookieyin.github.io/tags/%E8%BF%9B%E7%A8%8B/"/>
    
    <category term="线程" scheme="http://rookieyin.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cookie、Session和Token</title>
    <link href="http://rookieyin.github.io/e89afa94e460/"/>
    <id>http://rookieyin.github.io/e89afa94e460/</id>
    <published>2022-05-21T14:34:49.000Z</published>
    <updated>2022-06-12T13:34:34.412Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文重在对比cookie、session和token，并介绍它们的由来，不具体介绍这三个技术更深层次的细节。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="http://rookieyin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机网络" scheme="http://rookieyin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://rookieyin.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>输入一条URL后的那些事</title>
    <link href="http://rookieyin.github.io/62b22a6b76c8/"/>
    <id>http://rookieyin.github.io/62b22a6b76c8/</id>
    <published>2022-05-20T14:34:49.000Z</published>
    <updated>2022-06-12T13:34:39.334Z</updated>
    
    
    <summary type="html">&lt;p&gt;本文简单介绍一下：浏览器中输入URL地址，到显示网页期间发生了什么。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/images/url输入到展示出来的过程.jpg&quot; style=&quot;width:600px;&quot;&gt;&lt;/img&gt;&lt;/center&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="http://rookieyin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机网络" scheme="http://rookieyin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://rookieyin.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>TCP协议</title>
    <link href="http://rookieyin.github.io/6b13a81e4596/"/>
    <id>http://rookieyin.github.io/6b13a81e4596/</id>
    <published>2022-05-19T14:34:49.000Z</published>
    <updated>2022-06-12T13:31:54.618Z</updated>
    
    
    <summary type="html">&lt;p&gt;TCP协议是运输层面向连接的、可靠的端到端信息传输协议。在介绍TCP协议之前，我们先看下如何一步步设计出一个可靠数据传输协议。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="http://rookieyin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机网络" scheme="http://rookieyin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://rookieyin.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="TCP" scheme="http://rookieyin.github.io/tags/TCP/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议</title>
    <link href="http://rookieyin.github.io/87be9444017b/"/>
    <id>http://rookieyin.github.io/87be9444017b/</id>
    <published>2022-05-18T14:34:49.000Z</published>
    <updated>2022-06-12T13:29:41.542Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;http协议概述&quot;&gt;HTTP协议概述&lt;/h2&gt;
&lt;p&gt;HTTP 协议，全称超文本传输协议（Hypertext Transfer Protocol）， &lt;strong&gt;是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HTTP 是一个无状态（stateless）协议，也就是说服务器不维护任何有关客户端过去所发请求的消息。这其实是一种懒政，有状态协议会更加复杂，需要维护状态（历史信息），而且如果客户或服务器失效，会产生状态的不一致，解决这种不一致的代价更高。&lt;/p&gt;</summary>
    
    
    
    <category term="计算机基础" scheme="http://rookieyin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    <category term="计算机网络" scheme="http://rookieyin.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="计算机网络" scheme="http://rookieyin.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
    <category term="HTTP" scheme="http://rookieyin.github.io/tags/HTTP/"/>
    
  </entry>
  
</feed>
